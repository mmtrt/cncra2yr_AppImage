# APP env
progName="cncra2yr"
progArch="-x86_64"
progVer=
progHome="$HOME/.$progName"
progBin="clientxna.exe"
progIcoD="$HOME/.local/share/applications/$progName.desktop"

if [ -d "$APPDIR/winedata/.wine" ]; then
progRealPath="$APPDIR/winedata/.wine/drive_c/Westwood/RA2"
# env used by unionfs-fuse
# WINEPREFIX in the AppDir
RO_WINEPREFIX="$APPDIR/winedata/.wine"
RW_WINEPREFIX="$progHome/.wine"
MNT_WINEPREFIX=/tmp/."${progName}".unionfs
else
progRealPath="$progHome/Westwood/RA2"
# WINE env
export WINEPREFIX=${WINEPREFIX:-"$progHome/.wine"}
mkdir -p "$WINEPREFIX/drive_c/Westwood/RA2"
fi
export WINEARCH=${WINEARCH:-"win32"}
export WINEDLLOVERRIDES=${WINEDLLOVERRIDES:-"mshtml="}
export WINEDEBUG=${WINEDEBUG:-"fixme-all"}
export WINELOADER=${WINELOADER:-"$APPDIR/opt/wine-stable/bin/wine"}

# Symlink stuff
mkdir -p "$progHome" || exit 1

dkico() {
if [[ ! -f $progIcoD ]]; then

cp -r "$APPDIR"/usr/share/icons "$HOME"/.local/share
mkdir -p "$HOME/.local/share/applications"
DesktopFilePath="$HOME/.local/share/applications/$progName.desktop"

{
echo "[Desktop Entry]"
echo "Type=Application"
echo "Encoding=UTF-8"
echo "Name=$progName"
echo "Comment="
echo "Icon=$progName"
echo "TryExec=${OWD}/${progName}_${progArch}.AppImage"
echo "Exec=${OWD}/${progName}_${progArch}.AppImage %F"
echo "Categories=Game;"
echo "Terminal=false"
echo "StartupWMClass=CnCNetYRLauncher.exe,clientxna.exe,game.exe,gamemd-spawn.exe"
echo "Keywords=game"
} >> "$DesktopFilePath"
fi
}

msg="Note: This AppImage does not include the actual game so you have to buy or use your bought copy game files in order play.\n
Copy the following RA2|YR game files to $progHome \n
 > BINKW32.dll
 > BLOWFISH.dll
 > ra2.mix
 > ra2md.mix
 > language.mix
 > langmd.mix"

if [[ ! -f $progHome/ra2.mix ]] && [[ ! -f $WINEPREFIX/drive_c/Westwood/RA2/ra2.mix ]]; then
  mkdir -p "$WINEPREFIX/drive_c/Westwood/RA2" 2>/dev/null
  if [ -x /usr/bin/zenity ] ; then
    LD_LIBRARY_PATH="" zenity --error --text "${msg}" 2>/dev/null || exit 0
  elif [ -x /usr/bin/kdialog ] ; then
    LD_LIBRARY_PATH="" kdialog --msgbox "${msg}" 2>/dev/null || exit 0
  elif [ -x /usr/bin/Xdialog ] ; then
    LD_LIBRARY_PATH="" Xdialog --msgbox "${msg}" 2>/dev/null || exit 0
  else
    echo "${msg}"
    exit 0
  fi
  exit 1
fi

if [ -d "$APPDIR/winedata/.wine" ]; then
if [[ ! -f $progHome/CnCNetYRLauncher.exe ]]; then

cp -Rvp "$progRealPath/"* "$progHome"/ &>/dev/null

fi

# Load bundled WINEPREFIX if existing and if $WINEPREFIX is not set
if [ -d "$APPDIR/winedata/.wine" ] && [ -z "$WINEPREFIX" ] ; then
  mkdir -p "$MNT_WINEPREFIX" "$RW_WINEPREFIX"
  if [ ! -e "$MNT_WINEPREFIX/drive_c" ] ; then
    unionfs-fuse -o use_ino,uid=$UID -ocow "$RW_WINEPREFIX"=RW:"$RO_WINEPREFIX"=RO "$MNT_WINEPREFIX" || exit 1
    trap atexit EXIT
  fi
  export WINEPREFIX="$MNT_WINEPREFIX"
elif [[ ! -d "$APPDIR/winedata/.wine" ]]; then

mkdir -p "$HOME"/.cache/{wine,winetricks}
mkdir -p "$HOME"/.cache/winetricks/{dotnet40,xna40}

find "$HOME/.cache/wine/" "$HOME/.cache/winetricks/" -type l -delete &>/dev/null

ln -s "$HERE"/winedata/wine-mono-*-x86.msi "$HOME"/.cache/wine/
ln -s "$HERE"/winedata/dotNetFx40_Full_x86_x64.exe "$HOME"/.cache/winetricks/dotnet40/
ln -s "$HERE"/winedata/xnafx40_redist.msi "$HOME"/.cache/winetricks/xna40/

winetricks -q xna40

# silent flag for this /silent
wine "$APPDIR"/winedata/CnCNet5_YR_Installer.exe

fi
fi

atexit ()
{
  while pgrep -f "clientxna" ; do sleep 1 ; done
  pkill -f "unionfs-fuse"
  sleep 1
  rm -r "$MNT_WINEPREFIX" # "$RW_WINEPREFIX_OVERLAY"
}

# Passing args to wine apps
for i; do # for i = for i in "$@"
    # Add path in Wine form (e.g. "z:/home/user/Desktop/lol.xyz")
    if [[ -f /${i#?:} ]]; then 
        args+=("z:${i#?:}")   # When opened through .desktop or Wine path (e.g. z:/*)
    elif [[ "${i:0:1}" = "-" ]]; then
        args+=("${i/#-//}")
    fi
done

# Launch wineboot/winecfg/winetricks if requested.
# If the executable exists then launch it.
case "$1" in
  "install")
    dkico
    ;;
  "winetricks")
    winetricks "$2" "$3"
    ;;
  "msiexec"|"notepad"|"regedit"|"regsvr32"|"wineboot"|"winecfg"|"wineconsole"|"winedbg"|"winefile"|"winemine"|"winepath")
    "$WINELOADER" "$1"
    ;;
  "eglinfo"|"es2_info"|"es2gears_wayland"|"es2gears_x11"|"es2tri"|"glxinfo"|"glxheads"|"glxgears"|"glxdemo"|"vulkaninfo")
    "$@"
    ;;
   "vkcube"|"vkcubepp"|"vkcube-wayland")
    export VK_INSTANCE_LAYERS="VK_LAYER_MESA_overlay"
    "$@"
  *)
    if [ -d "$APPDIR/winedata/.wine" ]; then
     "$WINELOADER" "$progHome/Resources/$progBin" "${args[@]}"
    else
     "$WINELOADER" "$WINEPREFIX"/drive_c/Westwood/RA2/Resources/"$progBin" "${args[@]}"
    fi
    ;;
esac
