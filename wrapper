# APP env
progName="cncra2yr"
progArch="-x86_64"
progVer=
progHome="$HOME/.$progName"
progUGL="$progHome/Resources/BinariesNET8/UniversalGL"
progBin="$progUGL/clientogl.dll"
progEXE="gamemd-spawn.exe"
progIcoD="$HOME/.local/share/applications/$progName.desktop"

if [ -d "$APPDIR/winedata/.wine" ]; then
  progRealPath="$APPDIR/winedata/yr"
  # env used by unionfs-fuse
  # WINEPREFIX in the AppDir
  RO_WINEPREFIX="$APPDIR/winedata/.wine"
  RW_WINEPREFIX="$progHome/.wine"
  MNT_WINEPREFIX=/tmp/."${progName}".unionfs
else
  progRealPath="$APPDIR/winedata/yr"
  # WINE env
  export WINEPREFIX=${WINEPREFIX:-"$progHome/.wine"}
fi
export WINEDLLOVERRIDES=${WINEDLLOVERRIDES:-"mscoree,mshtml="}
export WINEDEBUG=${WINEDEBUG:-"fixme-all"}
export WINELOADER=${WINELOADER:-"$APPDIR/winedata/./wine-stable.AppImage"}

if [ ! -d "$progHome" ];then
  mkdir -p "$progHome" || exit 1
fi

dkico() {
if [[ ! -f $progIcoD ]]; then

cp -r "$APPDIR"/usr/share/icons "$HOME"/.local/share
mkdir -p "$HOME/.local/share/applications"
DesktopFilePath="$HOME/.local/share/applications/$progName.desktop"

{
echo "[Desktop Entry]"
echo "Type=Application"
echo "Encoding=UTF-8"
echo "Name=$progName"
echo "Comment="
echo "Icon=$progName"
echo "TryExec=${OWD}/${progName}_${progArch}.AppImage"
echo "Exec=${OWD}/${progName}_${progArch}.AppImage %F"
echo "Categories=Game;"
echo "Terminal=false"
echo "StartupWMClass=YRLauncherUnix.sh,gamemd-spawn.exe"
echo "Keywords=game"
} >> "$DesktopFilePath"
fi
}

msg="Note: This AppImage does not include the actual game so you have to buy or use your bought copy game files in order play.\n
Copy the following RA2|YR game files to $progHome \n
 > BINKW32.DLL
 > Blowfish.dll
 > ra2.mix
 > ra2md.mix
 > language.mix
 > langmd.mix"

if [[ ! -f $progHome/ra2.mix ]] || [[ ! -f $progHome/ra2md.mix ]] || [[ ! -f $progHome/language.mix ]] || [[ ! -f $progHome/langmd.mix ]] || [[ ! -f $progHome/Blowfish.dll ]] || [[ ! -f $progHome/BINKW32.DLL ]] ; then
  if [ -x /usr/bin/zenity ] ; then
    LD_LIBRARY_PATH="" zenity --error --text "${msg}" 2>/dev/null || exit 0
  elif [ -x /usr/bin/kdialog ] ; then
    LD_LIBRARY_PATH="" kdialog --msgbox "${msg}" 2>/dev/null || exit 0
  elif [ -x /usr/bin/Xdialog ] ; then
    LD_LIBRARY_PATH="" Xdialog --msgbox "${msg}" 2>/dev/null || exit 0
  else
    echo "${msg}"
    exit 0
  fi
  exit 1
fi

if [[ ! -f $progHome/YRLauncherUnix.sh ]] && [[ -d $APPDIR/winedata/.wine ]]; then

  cp -Rvp "$progRealPath/"* "$progHome"/ &>/dev/null
  sed -i 's| bin|/bin|' "$progHome"/YRLauncherUnix.sh
#   sed -i 's| bin|/bin|' "$progHome"/Resources/yr-wine.sh

fi

# Load bundled WINEPREFIX if existing and if $WINEPREFIX is not set
if [ -d "$APPDIR/winedata/.wine" ] && [ -z "$WINEPREFIX" ] ; then
  mkdir -p "$MNT_WINEPREFIX" "$RW_WINEPREFIX"
  if [ ! -e "$MNT_WINEPREFIX/drive_c" ] ; then
    unionfs-fuse -o use_ino,uid=$UID -ocow "$RW_WINEPREFIX"=RW:"$RO_WINEPREFIX"=RO "$MNT_WINEPREFIX" || exit 1
    trap atexit EXIT
  fi
  export WINEPREFIX="$MNT_WINEPREFIX"

elif [ ! -d "$WINEPREFIX" ]; then
  "$WINELOADER" wineboot
  "$WINELOADER" reg add "HKCU\\Software\\Wine\\AppDefaults\\gamemd-spawn.exe\\DllOverrides" /t REG_SZ /v ddraw /d native,builtin ; sleep 5
  cp -Rvp "$progRealPath/"* "$progHome"/ &>/dev/null
  sed -i 's| bin|/bin|' "$progHome"/YRLauncherUnix.sh
#   sed -i 's| bin|/bin|' "$progHome"/Resources/yr-wine.sh
fi

atexit ()
{
  while pgrep -f "clientogl" ; do sleep 1 ; done
  kill $(ps -ef | grep $progName.unionfs | awk '{print $2}' | head -1)
  sleep 1
  rm -r "$MNT_WINEPREFIX" # "$RW_WINEPREFIX_OVERLAY"
}

# Passing args to wine apps
for i; do # for i = for i in "$@"
    # Add path in Wine form (e.g. "z:/home/user/Desktop/lol.xyz")
    if [[ -f /${i#?:} ]]; then 
        args+=("z:${i#?:}")   # When opened through .desktop or Wine path (e.g. z:/*)
    elif [[ "${i:0:1}" = "-" ]]; then
        args+=("${i/#-//}")
    fi
done

# if [ -f "$progHome/version_u" ]; then
#
# InVer=$(cat $progHome/version | cut -d'=' -f2 | sed 1d | head -1 | cut -d'-' -f1)
# UpVer=$(cat $progHome/version_u | cut -d'=' -f2 | sed 1d | head -1 | cut -d'-' -f1)
#
# if [[ $UpVer < $InVer ]]; then
#   if [[ $(grep -c AppImage "$progHome"/Resources/yr-wine.sh) = 0 ]]; then
#     sed -i "s|wine|${OWD}/${progName}-${progVer}${progArch}.AppImage|" "$progHome"/Resources/yr-wine.sh
#   fi
# else
#   if [[ $(grep -c AppImage "$progHome"/Resources/yr-wine.sh) = 1 ]]; then
#     sed -i "s|$(grep -Eo "/.*.AppImage" "$progHome"/Resources/yr-wine.sh)|wine|" "$progHome"/Resources/yr-wine.sh
#   fi
# fi
#
# fi
#
# if [ ! -f "$progHome/version_u" ]; then
#  if [ $(grep -c AppImage "$progHome"/Resources/yr-wine.sh) = 0 ]; then
#     sed -i "s|wine|${OWD}/${progName}-${progVer}${progArch}.AppImage|" "$progHome"/Resources/yr-wine.sh
#  fi
# fi

# Launch wineboot/winecfg/winetricks if requested.
# If the executable exists then launch it.
case "$1" in
  "install")
    dkico
    ;;
  "winetricks")
    winetricks "$2" "$3"
    ;;
  "gamemd-spawn.exe")
    "$WINELOADER" "$1" "$2"
    ;;
  "clientogl.dll")
    "$APPDIR"/winedata/./dotnet "${args[@]}"
    ;;
  "msiexec"|"notepad"|"regedit"|"regsvr32"|"wineboot"|"winecfg"|"wineconsole"|"winedbg"|"winefile"|"winemine"|"winepath")
    "$WINELOADER" "$1"
    ;;
  "eglinfo"|"es2_info"|"es2gears_wayland"|"es2gears_x11"|"es2tri"|"glxinfo"|"glxheads"|"glxgears"|"glxdemo"|"vulkaninfo")
    "$WINELOADER" "$@"
    ;;
   "vkcube"|"vkcubepp"|"vkcube-wayland")
    export VK_INSTANCE_LAYERS="VK_LAYER_MESA_overlay"
    "$WINELOADER" "$@"
    ;;
  *)
    "$APPDIR"/winedata/./dotnet "$progBin" "${args[@]}"
    ;;
esac
